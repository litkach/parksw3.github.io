library(ggplot2); theme_set(theme_bw())
library(dplyr)
library(tidyr)
library(reshape2)
library(magrittr) ## for %<>%
library(tibble) ## for add_column
library(optimx)

optimv <- function(par, fn, gr = NULL, method = "Nelder-Mead", ...){
    .size <- 200
    .n <- length(par)
    .nrow <- .size
    .ncol <- 2 * .n + 1
    .names <- paste0("x", 1:.n)
    
    trace <- matrix(nrow = .nrow, ncol = .ncol) %>%
        as_data_frame %>%
        setNames(c(.names, "f", paste0("f_", .names)))
    i <- 1
    
    objfun <- function(state){
        f <- fn(state)
        trace[i,1:(.n+1)] <<- c(state, f)
        if(i == .nrow){
            trace %<>% rbind(matrix(nrow = .size, ncol = .ncol))
            .nrow <<- .nrow + ini_size
        }
        i <<- i + 1
        return(f)
    }
    if(!is.null(gr)){
        gradfun <- function(state){
            grad <- gr(state)
            trace[(i-1),(.n+2):.ncol] <<- grad
        
            return(grad)
        }
    }else{
        gradfun <- NULL
    }
    
    res <- optimx(par = par, fn = objfun, gr = gradfun, method = method, ...)
    trace %<>% filter(!is.na(x1))
    
    .cut <- rowSums(trace[,1:.n] == rep(par, each = nrow(trace)))
    .start <- tail(which(.cut == .n), 1)
        
    trace %<>% slice(.start:(.start+res$fevals-1))
    
    if(is.na(res$gevals)){
        trace %<>% select(1:(.n+1))
    }
    return(trace)
}

f <- function(x){
    (4 - 2.1 * x[1]^2 + x[1]^4/3) * x[1]^2 +
        x[1] * x[2] + (-4 + 4 * x[2]^2) * x[2]^2
}

traceCamel <- optimv(c(-1.3, -0.3), f)

triangulate <- . %>%
    "["(., outer(0:2, 1:nrow(.), "+"),) %>%
    add_column(tri =  rep(1:(nrow(.)/3), each = 3)) %>%
    filter(tri <= nrow(.)/3 - 2)

## setting up the surface
surface <- emdbook::curve3d(f(c(x,y)),
    xlim = c(-2.1, 2.1),
    ylim = c(-1.1, 1.1),
    n = 301,
    sys3d = "none") %>%
    with({
        m <- matrix(z, ncol = length(x))
        dimnames(m) <- list(x, y)
        return(m)
    }) %>%
    melt %>%
    setNames(c("x1", "x2", "f"))

triCamel <- traceCamel %>%
    triangulate 

g.default <- ggplot(NULL, aes(x1, x2)) +
    geom_contour(data = surface, aes(z = f, col = ..level..), binwidth = 0.2) + 
    scale_colour_gradientn(colours = c("#F291FF", "#DFDFDF", "#91FFFF"), name = "", limits = c(-1.2, 6.1)) + 
    coord_fixed(ratio = 1) +
    theme(legend.position = "none",
        panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.title.y = element_text(angle=0))

## make image files for gif
fn <- sprintf("camel_%03d", 1:(2 * max(triCamel$tri) - 1))

df <- triCamel %>% filter(tri == 1)

for(i in 1:50){
    cat(i)
    x.scale <- (min(df$x1) + max(df$x1))/2 + 0.5 * c(-1, 1)
    y.scale <- (min(df$x2) + max(df$x2))/2 + 0.5 * c(-1, 1)
    if(min(y.scale) < -1.1) y.scale <- c(-1.1, -0.1)
    
    g.tmp <- g.default +
        geom_polygon(data = df, aes(group = tri), fill = NA, col = "black") +
        scale_x_continuous(expand = c(0,0), limits = x.scale, name = expression(x[1])) +
        scale_y_continuous(expand = c(0,0), limits = y.scale, name = expression(x[2])) +
        theme(plot.margin = unit(c(0.3, 0.3, 0.2, 0.2), "in"))
    
    ggsave(file = paste0(fn[2 * i - 1], ".png"), g.tmp, width = 8, height = 8, dpi = 300)
    
    df <- triCamel %>% filter(tri == i+1)
    
    g.tmp2 <- g.tmp + geom_polygon(data = df, fill = NA, col = "black", lty = 2)
    if(i == 19){
        x.scale <- c(-0.25, 0.75)
        g.tmp2 <- g.tmp2 + scale_x_continuous(expand = c(0,0), limits = x.scale, name = expression(x[1])) 
    }
    ggsave(file = paste0(fn[2 * i], ".png"), g.tmp2, width = 8, height = 8, dpi = 300)
}